// transitions
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}
//transform webkit 
@mixin transform($property) {
  -webkit-transform: $property;
  -moz-transform: $property;
  -ms-transform: $property;
  -o-transform: $property;
  transform: $property;
}
// border-radius
@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
}
//functions 
@function theme-color($key: 'primary', $variant: 'base') {
  $map: map-get($theme-colors, $key);
  @return map-get($map, $variant);
}
//fonts functions
@function text-scale($level) {
  @return map-get(map-get($text-settings, $level), 'font-size');
}

@function line-height($level) {
  @return map-get(map-get($text-settings, $level), 'line-height');
}

@mixin text-setting($level) {
  font-size: text-scale($level);
  line-height: line-height($level);
}
//box shadow
@mixin box-shadow($left, $top, $radius, $color) {
  box-shadow: $left $top $radius $color;
  -webkit-box-shadow: $left $top $radius $color;
  -moz-box-shadow: $left $top $radius $color;
}
//0 0 0 1px rgba(0,0,0,0.04), 0 4px 8px 0 rgba(0,0,0,0.20)
// clearfix
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
// box sizing for all browser
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
     box-sizing: $box-model;
   }
//Set the opacity for all browsers and provide a filter fallback for IE8
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}
//  positioning
@mixin position($type: absolute,$top: auto, $right: auto, $bottom: auto, $left: auto) {
  position: $type;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
// gradients 
@mixin linear-gradient($gradient-start-color: #5989e5, $gradient-end-color: #37cfdc){
 background: $gradient-start-color;
 background-image: -webkit-linear-gradient(linear, left top, right top, from($gradient-start-color), to($gradient-end-color));
 background-image: -moz-linear-gradient(linear, left top, right top, from($gradient-start-color), to($gradient-end-color));
 background-image: linear-gradient(to left, $gradient-start-color, $gradient-end-color);
}
// saving three lines of code of pseudo element :before and :after
@mixin pseudo($content: '', $display: block, $position: absolute){
  content: $content;
  display: $display;
  position: $position;
}
@mixin truncate($truncation-boundary:300px) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
// Hide from both screenreaders and browsers
@mixin hidden {
	display: none;
	visibility: hidden;
}
// Display both screenreaders and browsers
@mixin visible($state: 'block') {
	display: unquote($state);
	visibility: visible;
}
// keyframe 
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}
//@include keyframes(slide-down) {
// 0% { opacity: 1; }
//  90% { opacity: 0; }
//}
// animations
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}
//.element{@include animation('slide-down 5s 3');}
// media queries
$breakpoints: (
  xs: 320px,
  sm: 768px,
  md: 1024px,
  lg: 1280px,
  xlg: 1280px
  );
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
